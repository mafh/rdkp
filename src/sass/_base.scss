$roboto: 'Roboto Condensed', sans-serif;
$old: 'Old', sans-serif;
$easing: cubic-bezier(1.000, 0.000, 0.000, 1.000);
$red: red;
$white: #fffbf2;
$black: #212020;
$gold: #bfa57b;
$lightgold: #d9d1c3;
$brown: #68553b;
$darkbrown: #393127;
$yellow: #fff7e5;

@mixin clr {
    &:after {
        content:"";
        display: block;
        clear: both;
    }
}

@mixin line {
    &:after {
        content:"";
        display: block;
        width: 50px;
        height: 1px;
        background-color: $gold;
        position: absolute;
        bottom: 0;
        left: 0;
    }
}

@mixin middle {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

@mixin cover {
    width:  100%;
    height: 100%;
    object-fit: cover;
    object-position: 50% 50%;
    font-family: 'object-fit: cover; object-position: 50% 50%;';
}

@mixin contain {
    width:  100%;
    height: 100%;
    object-fit: contain;
    object-position: 50% 50%;
    font-family: 'object-fit: contain; object-position: 50% 50%;';
}

@mixin linear-gradient($direction, $color-stops...) {
    @if is-direction($direction) == false {
    $color-stops: $direction, $color-stops;
    $direction: 180deg;
    }

    background: nth(nth($color-stops, 1), 1);
    background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
    background: linear-gradient($direction, $color-stops);
}

@function is-direction($value) {
    $is-keyword: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
    $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));

    @return $is-keyword or $is-angle;
}

@function legacy-direction($value) {
    @if is-direction($value) == false {
        @error "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.";
    }

    $conversion-map: (
        to top          : bottom,
        to top right    : bottom left,
        to right top    : left bottom,
        to right        : left,
        to bottom right : top left,
        to right bottom : left top,
        to bottom       : top,
        to bottom left  : top right,
        to left bottom  : right top,
        to left         : right,
        to left top     : right bottom,
        to top left     : bottom right
    );

    @if map-has-key($conversion-map, $value) {
        @return map-get($conversion-map, $value);
    }

    @return 90deg - $value;
}